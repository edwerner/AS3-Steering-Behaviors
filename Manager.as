package {	import flash.display.*;	import flash.events.*;	import flash.geom.Rectangle;	import flash.utils.*;	import fl.events.SliderEvent;	import fl.controls.Slider;		// The  manager  serves as a document class	// for our this world		public class Manager extends MovieClip	{		public var _obstacleArray:Array;		public static var _turtleArray:Array;				private var _lastTime: Number;		private var _curTime: Number;		private var _dt: Number;		private var _howMany: Number = 25;		public static var flockForward:Vector2;		public static var cohesn:Vector2 = new Vector2();		public static var obs:obstacle = new obstacle(Math.random()/10);				public function Manager( )		{			_obstacleArray = new Array();			_turtleArray = new Array();						this.buildWorld( );						//event listener for to drive frame loop			addEventListener(Event.ENTER_FRAME, frameLoop);			cohesion.addEventListener(SliderEvent.CHANGE, cohesionChange);			tether.addEventListener(SliderEvent.CHANGE, tetherChange);			pace.addEventListener(SliderEvent.CHANGE, paceChange);			alignment.addEventListener(SliderEvent.CHANGE, alignmentChange);			separation.addEventListener(SliderEvent.CHANGE, separationChange);			avoid.addEventListener(SliderEvent.CHANGE, avoidanceChange);		}		private function paceChange(e:SliderEvent)		{			SteeringVehicle._maxSpeed = e.target.value;		}		private function cohesionChange(e:SliderEvent)		{			Wanderer.cohesionWeight = e.target.value;		}		private function alignmentChange(e:SliderEvent)		{			Wanderer.alignmentWeight = e.target.value;		}				private function tetherChange(e:SliderEvent)		{			Wanderer.tetherWeight = e.target.value;		}					private function wanderChange(e:SliderEvent)		{			Wanderer.wanderWeight = e.target.value;		}		private function separationChange(e:SliderEvent)		{			Wanderer.separationWeight = e.target.value;		}		private function avoidanceChange(e:SliderEvent)		{			Wanderer.obsWeight = e.target.value;		}						private function buildWorld():void		{			var circle:obstacle;			for(var i:int = 0; i < 5; i++)			{				circle = new obstacle(50);				circle.x = Math.random() * 800;				circle.y = Math.random() * 600;				addChild(circle);				_obstacleArray.push(circle);			}						var temp: Wanderer;			for (var j : int = 0; j < _howMany; j++)			{				temp = new Wanderer(this, 0, 800);				temp.turnLeft(j * 360/_howMany);				_turtleArray.push(temp);				//temp.setObstacle(_obstacleArray);			}			_lastTime = getTimer( );		}				//This frameloop sends an update message to each turtle in the turtleArray		private function frameLoop(e: Event ):void		{			//manage dt: change in time			_curTime = getTimer( );			_dt = (_curTime - _lastTime)/1000;			_lastTime = _curTime;						//call to wanderer class			flockForward = Wanderer.forwardSum();				//tell the sprites to do their update			cohesn = new Vector2();						for(var i:Number = 0; i < _turtleArray.length; i++)			{				cohesn = cohesn.add(_turtleArray[i].position);			}						cohesn = cohesn.divide(_turtleArray.length);						for(var j:Number = 0; j < _turtleArray.length; j++)			{				_turtleArray[j].update(_dt);			}		}	}}